language: generic
services:
  - docker

env:
  matrix:
    - ROS_DISTRO="kinetic" UPSTREAM_WORKSPACE=file

install:
  - git clone --quiet --depth 1 https://github.com/ros-industrial/industrial_ci.git .industrial_ci

before_script:
  # Install Other dependencies
  - sudo add-apt-repository -y ppa:libccd-debs/ppa
  - sudo add-apt-repository -y ppa:fcl-debs/ppa
  - sudo add-apt-repository -y ppa:dartsim/ppa
  - sudo add-apt-repository -y ppa:personalrobotics/ppa
  - sudo rm -vf /etc/apt/sources.list.d/*riak*
  - sudo apt-get update
  - sudo apt-get install cmake cmake-data build-essential libboost-filesystem-dev libmicrohttpd-dev libompl-dev libtinyxml2-dev libyaml-cpp-dev
  - sudo apt-get install libdart6-all-dev
  - sudo pip install pybind11

script:
  - .industrial_ci/travis.sh

# # Generic .travis.yml file for running continuous integration on Travis-CI for
# # any ROS package.
# #
# # Available here:
# #   - https://github.com/felixduvallet/ros-travis-integration
# #
# # This installs ROS on a clean Travis-CI virtual machine, creates a ROS
# # workspace, resolves all listed dependencies, and sets environment variables
# # (setup.bash). Then, it compiles the entire ROS workspace (ensuring there are
# # no compilation errors), and runs all the tests. If any of the compilation/test
# # phases fail, the build is marked as a failure.
# #
# # We handle two types of package dependencies specified in the package manifest:
# #   - system dependencies that can be installed using `rosdep`, including other
# #     ROS packages and system libraries. These dependencies must be known to
# #     `rosdistro` and are installed using apt-get.
# #   - package dependencies that must be checked out from source. These are handled by
# #     `wstool`, and should be listed in a file named dependencies.rosinstall.
# #

# # There are envioronment variables you may want to change, such as ROS_DISTRO,
# # ROSINSTALL_FILE, and the CATKIN_OPTIONS file.  See the README.md for more
# # information on these flags, and
# # https://docs.travis-ci.com/user/environment-variables/ for information about
# # Travis environment variables in general.
# #
# # Author: Felix Duvallet <felixd@gmail.com>

# # NOTE: The build lifecycle on Travis.ci is something like this:
# #    before_install
# #    install
# #    before_script
# #    script
# #    after_success or after_failure
# #    after_script
# #    OPTIONAL before_deploy
# #    OPTIONAL deploy
# #    OPTIONAL after_deploy

# ################################################################################

# sudo: required
# cache:
#   - apt

# # Build all valid Ubuntu/ROS combinations available on Travis VMs.
# language: cpp

# services:
#   - docker

# matrix:
#   include:
#   - name: "Xenial kinetic"
#     dist: xenial
#     env: ROS_DISTRO=kinetic

# # Configuration variables. All variables are global now, but this can be used to
# # trigger a build matrix for different ROS distributions if desired.
# # env:
# #   global:
# #     - ROS_CI_DESKTOP="`lsb_release -cs`"  # e.g. [precise|trusty|...]
# #     - CI_SOURCE_PATH=$(pwd)
# #     - ROSINSTALL_FILE=$CI_SOURCE_PATH/dependencies.rosinstall
# #     - CATKIN_OPTIONS=$CI_SOURCE_PATH/catkin.options
# #     - ROS_PARALLEL_JOBS='-j8 -l6'
# #     # Set the python path manually to include /usr/-/python2.7/dist-packages
# #     # as this is where apt-get installs python packages.
# #     - PYTHONPATH=$PYTHONPATH:/usr/lib/python2.7/dist-packages:/usr/local/lib/python2.7/dist-packages
# ################################################################################

# env:
#   global:
#     - ROS_CI_DESKTOP="`lsb_release -cs`"  # e.g. [precise|trusty|...]
#     - toolset_branch: master
#     - server_type: travis
#     - ros_release_name: kinetic
#     - ubuntu_version_name: xenial
#     - used_modules: check_cache,check_build
#     - remote_shell_script: 'https://raw.githubusercontent.com/shadow-robot/sr-build-tools/$toolset_branch/bin/sr-run-ci-build.sh'

# # Install system dependencies, namely a very barebones ROS setup.
# before_install:
#   - sudo sh -c "echo \"deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main\" > /etc/apt/sources.list.d/ros-latest.list"
#   - sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116
#   - sudo rm -vf /etc/apt/sources.list.d/*riak*
#   - sudo apt-get update -qq
#   - sudo apt-get install dpkg
#   - sudo apt-get install -y python-catkin-pkg python-rosdep python-wstool python-catkin-tools ros-$ROS_DISTRO-desktop-full
#   - source /opt/ros/$ROS_DISTRO/setup.bash
#   # Prepare rosdep to install dependencies.
#   - sudo rosdep init
#   - rosdep update

# # Create a catkin workspace with the package under integration.
# install:
#   - mkdir -p ~/catkin_ws/src
#   - cd ~/catkin_ws/src
#   - catkin_init_workspace
#   # Create the devel/setup.bash (run catkin_make with an empty workspace) and
#   # source it to set the path variables.
#   - cd ~/catkin_ws
#   - catkin build
#   - source devel/setup.bash
#   # Add the package under integration to the workspace using a symlink.
#   - cd ~/catkin_ws/src
#   # - ln -s $CI_SOURCE_PATH .

# # Install all dependencies, using wstool first and rosdep second.
# # wstool looks for a ROSINSTALL_FILE defined in the environment variables.
# before_script:
#   # Install Other dependencies
#   - sudo add-apt-repository -y ppa:libccd-debs/ppa
#   - sudo add-apt-repository -y ppa:fcl-debs/ppa
#   - sudo add-apt-repository -y ppa:dartsim/ppa
#   - sudo add-apt-repository -y ppa:personalrobotics/ppa
#   - sudo rm -vf /etc/apt/sources.list.d/*riak*
#   - sudo sed -i 'deb  http://ppa.launchpad.net/q-quark/equalx/ubuntu xenial main' /etc/apt/sources.list
#   - sudo sed -i 'deb  http://ppa.launchpad.net/q-quark/equalx/ubuntu xenial main' /etc/apt/sources.list.d/*
#   - sudo apt-get update
#   - sudo apt-get install cmake build-essential libboost-filesystem-dev libmicrohttpd-dev libompl-dev libtinyxml2-dev libyaml-cpp-dev pr-control-msgs
#   - sudo apt-get install libdart6-all-dev
#   - sudo pip install pybind11
#   # source dependencies: install using wstool.
#   # - cd ~/catkin_ws/src
#   # - wstool init
#   # - if [[ -f $ROSINSTALL_FILE ]] ; then wstool merge $ROSINSTALL_FILE ; fi
#   # - wstool up
  
# # Compile and test (mark the build as failed if any step fails). If the
# # CATKIN_OPTIONS file exists, use it as an argument to catkin_make, for example
# # to blacklist certain packages.
# #
# # NOTE on testing: `catkin_make run_tests` will show the output of the tests
# # (gtest, nosetest, etc..) but always returns 0 (success) even if a test
# # fails. Running `catkin_test_results` aggregates all the results and returns
# # non-zero when a test fails (which notifies Travis the build failed).
# script:
#   - curl -s "$( echo "$remote_shell_script" | sed 's/#/%23/g' )" | bash -x /dev/stdin "$toolset_branch" $server_type $used_modules
#   - source /opt/ros/$ROS_DISTRO/setup.bash
#   - cd ~/catkin_ws
#   - catkin build $( [ -f $CATKIN_OPTIONS ] && cat $CATKIN_OPTIONS )
#   - source devel/setup.bash
